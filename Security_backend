const express = require('express');
const bodyParser = require('body-parser');
const session = require('express-session');
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const bcrypt = require('bcrypt');
const mysql = require('mysql');

const app = express();
const port = 3000;

// Create MySQL connection
const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'security'
});

// Connect to MySQL server
db.connect((err) => {
  if (err) {
    throw err;
  }
  console.log('Connected to MySQL server');
});

// Middleware to parse JSON bodies
app.use(bodyParser.json());

// Session middleware
app.use(session({
  secret: 'secret',
  resave: false,
  saveUninitialized: false
}));

// Passport initialization
app.use(passport.initialize());
app.use(passport.session());

// Passport local strategy for username/password authentication
passport.use(new LocalStrategy(async (username, password, done) => {
  try {
    const sql = 'SELECT * FROM users WHERE username = ?';
    db.query(sql, [username], async (err, results) => {
      if (err) {
        return done(err);
      }
      if (results.length === 0) {
        return done(null, false, { message: 'Incorrect username.' });
      }
      const user = results[0];
      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) {
        return done(null, false, { message: 'Incorrect password.' });
      }
      return done(null, user);
    });
  } catch (err) {
    return done(err);
  }
}));

// Serialize user object into session
passport.serializeUser((user, done) => {
  done(null, user.id);
});

// Deserialize user object from session
passport.deserializeUser((id, done) => {
  const sql = 'SELECT * FROM users WHERE id = ?';
  db.query(sql, [id], (err, results) => {
    if (err) {
      return done(err);
    }
    const user = results[0];
    done(null, user);
  });
});

// Route to reset password
app.post('/reset-password', async (req, res) => {
  try {
    const { username, newPassword } = req.body;
    const sql = 'SELECT * FROM users WHERE username = ?';
    db.query(sql, [username], async (err, results) => {
      if (err) {
        throw err;
      }
      if (results.length === 0) {
        return res.status(404).json({ message: 'User not found' });
      }
      const user = results[0];
      // Hash the new password
      const hashedPassword = await bcrypt.hash(newPassword, 10);
      const updateSql = 'UPDATE users SET password = ? WHERE id = ?';
      db.query(updateSql, [hashedPassword, user.id], (err) => {
        if (err) {
          throw err;
        }
        res.json({ message: 'Password reset successful' });
      });
    });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Route handler for the root path
app.get('/', (req, res) => {
  res.send('Welcome to the e-library!');
});

// Start server
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
